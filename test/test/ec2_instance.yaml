---
- name: to create ec2 instance
  hosts: localhost
  vars:
    - key_name: JINO_N
    - image_name: ami-0ac019f4fcb7cb7e6
    - count: 1
    - instance_type: t2.micro
    - assign_public_ip: yes
    - security_group: "{{ security_group_name }}"
    - vpc_subnet_id: subnet-f5d94692
    - region: us-east-1
    - security_group_name: my_security_group
    - vpc_id: vpc-d12a82ab
    - load_balance_name: myloadbalance
    - load_balance_state: present
    - region_zones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
        - us-east-1d
        - us-east-1e
        - us-east-1f

  tasks:
  - local_action:
      module: ec2_group
      name: "{{ security_group_name }}"
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      description: "{{ security_group_name }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    tags:
      - lb
  - ec2_elb_lb:
      name: "{{ load_balance_name }}"
      state: "{{ load_balance_state | default('present')}}"
      region: "{{ region }}"
      zones: "{{ item }}"
      security_group_names: "{{ security_group_name }}"
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
    with_items:
      - "{{ region_zones }}"
    tags:
      - lb
  - name: create instance in aws
    ec2:
      region: "{{ region }}"
      key_name: "{{ key_name }}"
      instance_type: "{{ instance_type | default('t2.micro') }}"
      wait: yes
      assign_public_ip: "{{ assign_public_ip | default('no') }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      count: "{{ count | int('1') }}"
      group: "{{ security_group_name | default('default') }}"
      instance_tags:
        Name: JINO
      image: "{{ image_name }}"
    register: ec2_instances
  - name: Store EC2 instance IPs to provision against
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: ec2_instance_ips
    with_items: "{{ ec2_instances.tagged_instances }}"

  - name: Wait for servers to come online
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22
      timeout: 180
    with_items: "{{ ec2_instances.tagged_instances }}"

  - name: Add EC2 instances as known hosts
    known_hosts:
      name: "{{ item.public_ip }}"
      key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
    with_items: "{{ ec2_instances.tagged_instances }}"

- hosts: ec2_instance_ips
  remote_user: ubuntu
  become: True
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
    - name: Create default index page
      copy:
        dest: /usr/share/nginx/html/index.html
        content: "Howdy from {{ ansible_hostname }}"
    - name: Restart nginx
      service:
        name: nginx
        state: restarted
